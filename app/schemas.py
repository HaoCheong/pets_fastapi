"""schemas.py (3)

The expected structure/schema of a input or output value

- For type safety during DB manipulation
- Technically optionally, but necessary for auto-documentation
- Can be thought of as the JSON the database expect to receive and/or return

"""

from typing import List, Union, Optional
from pydantic import BaseModel
from datetime import datetime

'''
======== BASE SCHEMAS ========
Schema containing information that will be expected to all other schema
'''

class OwnerBase(BaseModel):
    ''' Owners Base Schema '''
    name: str
    email: str
    home_address: str

   # Allow for Object Relational Mapping (Treating relation like nested objects)
    class Config:
        orm_mode = True

class PetBase(BaseModel):
    ''' Owners Base Schema '''
    name: str
    age: int

    # Allow for Object Relational Mapping (Treating relation like nested objects)
    class Config:
        orm_mode = True

class TrainerBase(BaseModel):
    ''' Owners Base Schema '''
    name: str
    description: str
    phone_no: str
    email: str
    date_started: datetime

    # Allow for Object Relational Mapping (Treating relation like nested objects)
    class Config:
        orm_mode = True

class MealBase(BaseModel):
    ''' Meal Base Schema, used for input check in NutritionPlanBase '''
    protein: str
    carb: str
    fibre: str

class NutritionPlanBase(BaseModel):
    ''' Nutrition Plan Base Schema '''
    name: str
    description: str
    meal: MealBase
    starting_date: datetime

    # Allow for Object Relational Mapping (Treating relation like nested objects)
    class Config:
        orm_mode = True

'''
======== CREATE SCHEMA ========
Schema inherit Base schemas, for when new instance of object is created
 - Used when unknowable data is required
 - Sometimes used to prevent sensitive data from leaking into the other API.
'''

class OwnerCreate(OwnerBase):
    ''' Owner Create Schema '''
    password: str  # Password on for creation, means no accidental leak by other schemas


class PetCreate(PetBase):
    ''' Pet Create Schema, no difference. Kept for potential future expansion '''
    pass


class TrainerCreate(TrainerBase):
    ''' Trainer Create Schema, not autogenerated thus needs to input is on creation '''
    trainer_id: str

class NutritionPlanCreate(NutritionPlanBase):
    ''' Nutrition Plan Create Schema, no difference. Kept for potential future expansion '''
    pass

'''
======== READ NO RELATION ========
Schema inherit Base schemas, for reading object data WITHOUT relational information
 - Used in "Get All" cruds to provide reduced network load on large complex data
 - Used when relationships are represented in the return.
       - Pets is dependent on the 3 other models, returning all that data for every pet is heavy on the network.
 - Used when data are self-referential, self referential data could result in a recursive loop as it expands repeatedly
'''

class OwnerReadNR(OwnerBase):
    ''' Owner Read w/o relation Schema '''
    id: int

class PetReadNR(PetBase):
    ''' Pet Read w/o relation Schema '''
    id: int

class TrainerReadNR(TrainerBase):
    ''' Trainer Read w/o relation Schema '''
    trainer_id: str

class NutritionPlanReadNR(NutritionPlanBase):
    ''' Nutrition Plan Read w/o relation Schema '''
    id: int

'''
======== READ WITH RELATION ========
Schema inherit No Relation schemas, for reading object data WITH relational information
 - Used when data is specfied and requires pulling all data of its relation
 - Built off the non-relational read schema
 - Pulled data uses non-relational read to prevent heavy network load
'''

class OwnerReadWR(OwnerReadNR):
    ''' Owner Read w/ relation Schema '''
    pets: List[PetReadNR]

class PetReadWR(PetReadNR):
    ''' Pet Read w/ relation Schema '''
    trainers: List[TrainerReadNR]
    nutrition_plan: Union[NutritionPlanReadNR, None]
    owner: Union[OwnerReadNR, None]

class TrainerReadWR(TrainerReadNR):
    ''' Trainer Read w/ relation Schema '''
    pets: List[PetReadNR]

class NutritionPlanReadWR(NutritionPlanReadNR):
    ''' Nutrition Plan Read w/ relation Schema '''
    pet: Union[PetReadNR, None]

'''
======== UPDATE SCHEMA ========
Schema inherit Base schema, for updating existing information
On update, any optional field not included will not be updated
Typically a carbon copy of the base field with everything overwritten with the Optional typing
'''

class OwnerUpdate(OwnerBase):
    ''' Owner update schema '''
    name: Optional[str]
    email: Optional[str]
    home_address: Optional[str]


class PetUpdate(PetBase):
    ''' Pet update schema '''
    name: Optional[str]
    age: Optional[int]


class TrainerUpdate(TrainerBase):
    ''' Trainer update schema '''
    trainer_id: Optional[str] # Trainer ID in this case is updatable, Pet and Owner cannot update their ID
    name: Optional[str]
    description: Optional[str]
    phone_no: Optional[str]
    email: Optional[str]

class NutritionPlanUpdate(NutritionPlanBase):
    ''' Nutrition Plan update schema '''
    name: Optional[str]
    description: Optional[str]
    meal: Optional[MealBase]